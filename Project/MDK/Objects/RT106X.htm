<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\RT106X.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\RT106X.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6120001: Last Updated: Sat Aug 14 23:28:16 2021
<BR><P>
<H3>Maximum Stack Usage =       3416 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Init_motor &rArr; pwm_init &rArr; pwm_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[136]">DbgConsole_SendDataReliable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10d]">__aeabi_assert</a><BR>
 <LI><a href="#[18c]">SerialManager_Write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10d]">__aeabi_assert</a><BR>
 <LI><a href="#[18b]">Serial_UartWrite</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10d]">__aeabi_assert</a><BR>
 <LI><a href="#[16a]">HAL_UartSendBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10d]">__aeabi_assert</a><BR>
 <LI><a href="#[16b]">LPUART_WriteBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10d]">__aeabi_assert</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[86]">ACMP1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[87]">ACMP2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[88]">ACMP3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[89]">ACMP4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[4e]">ADC1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[4f]">ADC2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[84]">ADC_ETC_ERROR_IRQ_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[81]">ADC_ETC_IRQ0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[82]">ADC_ETC_IRQ1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[83]">ADC_ETC_IRQ2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[42]">BEE_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from common.o(.text.BusFault_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[cd]">CAN1_DriverIRQHandler</a> from fsl_flexcan.o(.text.CAN1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2f]">CAN1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ce]">CAN2_DriverIRQHandler</a> from fsl_flexcan.o(.text.CAN2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[30]">CAN2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[de]">CAN3_DriverIRQHandler</a> from fsl_flexcan.o(.text.CAN3_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[a5]">CAN3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6a]">CCM_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6b]">CCM_2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[1e]">CORE_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[36]">CSI_IRQHandler</a> from isr.o(.text.CSI_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3c]">CSU_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[1c]">CTI0_ERROR_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[1d]">CTI1_ERROR_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[50]">DCDC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3d]">DCP_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3e]">DCP_VMI_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ac]">DMA0_DMA16_DriverIRQHandler</a> from fsl_edma.o(.text.DMA0_DMA16_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[b]">DMA0_DMA16_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b6]">DMA10_DMA26_DriverIRQHandler</a> from fsl_edma.o(.text.DMA10_DMA26_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[15]">DMA10_DMA26_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b7]">DMA11_DMA27_DriverIRQHandler</a> from fsl_edma.o(.text.DMA11_DMA27_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[16]">DMA11_DMA27_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b8]">DMA12_DMA28_DriverIRQHandler</a> from fsl_edma.o(.text.DMA12_DMA28_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[17]">DMA12_DMA28_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b9]">DMA13_DMA29_DriverIRQHandler</a> from fsl_edma.o(.text.DMA13_DMA29_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[18]">DMA13_DMA29_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ba]">DMA14_DMA30_DriverIRQHandler</a> from fsl_edma.o(.text.DMA14_DMA30_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[19]">DMA14_DMA30_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[bb]">DMA15_DMA31_DriverIRQHandler</a> from fsl_edma.o(.text.DMA15_DMA31_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[1a]">DMA15_DMA31_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ad]">DMA1_DMA17_DriverIRQHandler</a> from fsl_edma.o(.text.DMA1_DMA17_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[c]">DMA1_DMA17_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ae]">DMA2_DMA18_DriverIRQHandler</a> from fsl_edma.o(.text.DMA2_DMA18_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[d]">DMA2_DMA18_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[af]">DMA3_DMA19_DriverIRQHandler</a> from fsl_edma.o(.text.DMA3_DMA19_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[e]">DMA3_DMA19_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b0]">DMA4_DMA20_DriverIRQHandler</a> from fsl_edma.o(.text.DMA4_DMA20_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[f]">DMA4_DMA20_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b1]">DMA5_DMA21_DriverIRQHandler</a> from fsl_edma.o(.text.DMA5_DMA21_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[10]">DMA5_DMA21_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b2]">DMA6_DMA22_DriverIRQHandler</a> from fsl_edma.o(.text.DMA6_DMA22_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[11]">DMA6_DMA22_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b3]">DMA7_DMA23_DriverIRQHandler</a> from fsl_edma.o(.text.DMA7_DMA23_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[12]">DMA7_DMA23_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b4]">DMA8_DMA24_DriverIRQHandler</a> from fsl_edma.o(.text.DMA8_DMA24_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[13]">DMA8_DMA24_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b5]">DMA9_DMA25_DriverIRQHandler</a> from fsl_edma.o(.text.DMA9_DMA25_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[14]">DMA9_DMA25_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[bc]">DMA_ERROR_DriverIRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[1b]">DMA_ERROR_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e0]">DbgConsole_PrintCallback</a> from fsl_debug_console.o(.text.DbgConsole_PrintCallback) referenced 2 times from fsl_debug_console.o(.text.DbgConsole_Printf)
 <LI><a href="#[8]">DebugMon_Handler</a> from common.o(.text.DebugMon_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[0]">DefaultISR</a> from startup_mimxrt1064.o(.text) referenced 2 times from fsl_flexcan.o(.data.s_flexcanIsr)
 <LI><a href="#[0]">DefaultISR</a> from startup_mimxrt1064.o(.text) referenced 2 times from fsl_lpuart.o(.data.s_lpuartIsr)
 <LI><a href="#[0]">DefaultISR</a> from startup_mimxrt1064.o(.text) referenced 2 times from fsl_usdhc.o(.data.s_usdhcIsr)
 <LI><a href="#[0]">DefaultISR</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[0]">DefaultISR</a> from startup_mimxrt1064.o(.text) referenced 81 times from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8c]">ENC1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8d]">ENC2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8e]">ENC3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8f]">ENC4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[dd]">ENET2_1588_Timer_DriverIRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[a4]">ENET2_1588_Timer_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[dc]">ENET2_DriverIRQHandler</a> from fsl_enet.o(.text.ENET2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[a3]">ENET2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[db]">ENET_1588_Timer_DriverIRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[7e]">ENET_1588_Timer_IRQHandler</a> from fsl_enet.o(.text.ENET_1588_Timer_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[da]">ENET_DriverIRQHandler</a> from fsl_enet.o(.text.ENET_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[7d]">ENET_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[69]">EWM_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d4]">FLEXIO1_DriverIRQHandler</a> from fsl_flexio.o(.text.FLEXIO1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[65]">FLEXIO1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d5]">FLEXIO2_DriverIRQHandler</a> from fsl_flexio.o(.text.FLEXIO2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[66]">FLEXIO2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[df]">FLEXIO3_DriverIRQHandler</a> from fsl_flexio.o(.text.FLEXIO3_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[a7]">FLEXIO3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[31]">FLEXRAM_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d6]">FLEXSPI2_DriverIRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[76]">FLEXSPI2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d7]">FLEXSPI_DriverIRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[77]">FLEXSPI_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6c]">GPC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5b]">GPIO1_Combined_0_15_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5c]">GPIO1_Combined_16_31_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[53]">GPIO1_INT0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[54]">GPIO1_INT1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[55]">GPIO1_INT2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[56]">GPIO1_INT3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[57]">GPIO1_INT4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[58]">GPIO1_INT5_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[59]">GPIO1_INT6_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5a]">GPIO1_INT7_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5d]">GPIO2_Combined_0_15_IRQHandler</a> from isr.o(.text.GPIO2_Combined_0_15_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5e]">GPIO2_Combined_16_31_IRQHandler</a> from isr.o(.text.GPIO2_Combined_16_31_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5f]">GPIO3_Combined_0_15_IRQHandler</a> from fsl_sdmmc_host.o(.text.GPIO3_Combined_0_15_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[60]">GPIO3_Combined_16_31_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[61]">GPIO4_Combined_0_15_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[62]">GPIO4_Combined_16_31_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[63]">GPIO5_Combined_0_15_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[64]">GPIO5_Combined_16_31_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a8]">GPIO6_7_8_9_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[34]">GPR_IRQ_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6f]">GPT1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[70]">GPT2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from common.o(.text.HardFault_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[32]">KPP_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[35]">LCDIF_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c5]">LPI2C1_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[27]">LPI2C1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c6]">LPI2C2_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[28]">LPI2C2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c7]">LPI2C3_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C3_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[29]">LPI2C3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c8]">LPI2C4_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C4_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2a]">LPI2C4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c9]">LPSPI1_DriverIRQHandler</a> from fsl_lpspi.o(.text.LPSPI1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2b]">LPSPI1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ca]">LPSPI2_DriverIRQHandler</a> from fsl_lpspi.o(.text.LPSPI2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2c]">LPSPI2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[cb]">LPSPI3_DriverIRQHandler</a> from fsl_lpspi.o(.text.LPSPI3_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2d]">LPSPI3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[cc]">LPSPI4_DriverIRQHandler</a> from fsl_lpspi.o(.text.LPSPI4_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2e]">LPSPI4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[bd]">LPUART1_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[1f]">LPUART1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[be]">LPUART2_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[20]">LPUART2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[bf]">LPUART3_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART3_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[21]">LPUART3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c0]">LPUART4_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART4_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[22]">LPUART4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c1]">LPUART5_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART5_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[23]">LPUART5_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c2]">LPUART6_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART6_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[24]">LPUART6_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c3]">LPUART7_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART7_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[25]">LPUART7_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c4]">LPUART8_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART8_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[26]">LPUART8_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from common.o(.text.MemManage_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from common.o(.text.NMI_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[85]">PIT_IRQHandler</a> from isr.o(.text.PIT_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[48]">PMU_EVENT_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[71]">PWM1_0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[72]">PWM1_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[73]">PWM1_2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[74]">PWM1_3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[75]">PWM1_FAULT_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[94]">PWM2_0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[95]">PWM2_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[96]">PWM2_2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[97]">PWM2_3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[98]">PWM2_FAULT_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[99]">PWM3_0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9a]">PWM3_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9b]">PWM3_2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9c]">PWM3_3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9d]">PWM3_FAULT_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9e]">PWM4_0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9f]">PWM4_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a0]">PWM4_2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a1]">PWM4_3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a2]">PWM4_FAULT_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[37]">PXP_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from common.o(.text.PendSV_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[68]">RTWDOG_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6e]">Reserved115_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8a]">Reserved143_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8b]">Reserved144_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a6]">Reserved171_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3f]">Reserved68_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[49]">Reserved78_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[51]">Reserved86_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[52]">Reserved87_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[cf]">SAI1_DriverIRQHandler</a> from fsl_sai.o(.text.SAI1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[43]">SAI1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d0]">SAI2_DriverIRQHandler</a> from fsl_sai.o(.text.SAI2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[44]">SAI2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d1]">SAI3_RX_DriverIRQHandler</a> from fsl_sai.o(.text.SAI3_RX_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[45]">SAI3_RX_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d2]">SAI3_TX_DriverIRQHandler</a> from fsl_sai.o(.text.SAI3_TX_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[46]">SAI3_TX_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[78]">SEMC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[41]">SJC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[39]">SNVS_HP_WRAPPER_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3a]">SNVS_HP_WRAPPER_TZ_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3b]">SNVS_LP_WRAPPER_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d3]">SPDIF_DriverIRQHandler</a> from fsl_spdif.o(.text.SPDIF_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[47]">SPDIF_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6d]">SRC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from common.o(.text.SVC_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from fsl_sdmmc_event.o(.text.SysTick_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[aa]">SystemInit</a> from system_mimxrt1064.o(.text.SystemInit) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[4a]">TEMP_LOW_HIGH_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[4b]">TEMP_PANIC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[90]">TMR1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[91]">TMR2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[92]">TMR3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[93]">TMR4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[40]">TRNG_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[33]">TSC_DIG_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[7c]">USB_OTG1_IRQHandler</a> from zf_usb_cdc.o(.text.USB_OTG1_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[7b]">USB_OTG2_IRQHandler</a> from zf_usb_cdc.o(.text.USB_OTG2_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[4c]">USB_PHY1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[4d]">USB_PHY2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d8]">USDHC1_DriverIRQHandler</a> from fsl_usdhc.o(.text.USDHC1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[79]">USDHC1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d9]">USDHC2_DriverIRQHandler</a> from fsl_usdhc.o(.text.USDHC2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[7a]">USDHC2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from common.o(.text.UsageFault_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[67]">WDOG1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[38]">WDOG2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[7f]">XBAR1_IRQ_0_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[80]">XBAR1_IRQ_2_3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ab]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[e1]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[a9]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[ab]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[1d7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[1d3]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1d5]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1d8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1d9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1da]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1db]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1dc]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DMA0_DMA16_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DMA1_DMA17_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA2_DMA18_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA3_DMA19_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA4_DMA20_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA5_DMA21_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA6_DMA22_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA7_DMA23_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA8_DMA24_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA9_DMA25_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA10_DMA26_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA11_DMA27_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA12_DMA28_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA13_DMA29_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA14_DMA30_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA15_DMA31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>LPUART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>LPUART3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LPUART4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>LPUART5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>LPUART6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>LPUART7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>LPUART8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>LPI2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>LPI2C2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>LPI2C3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>LPI2C4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>LPSPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>LPSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>LPSPI3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>LPSPI4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SAI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SAI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SAI3_RX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SAI3_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPDIF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>FLEXIO1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>FLEXIO2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>FLEXSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>FLEXSPI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>USDHC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>USDHC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>ENET_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>ENET2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>ENET2_1588_Timer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>CAN3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>FLEXIO3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>ACMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>ACMP3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>ACMP4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>ADC_ETC_ERROR_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>ADC_ETC_IRQ0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>ADC_ETC_IRQ1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>ADC_ETC_IRQ2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>BEE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CCM_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CCM_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CORE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CSU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>CTI0_ERROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CTI1_ERROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DCDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DCP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DCP_VMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>DMA_ERROR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[0]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 5]<UL><LI> fsl_flexcan.o(.data.s_flexcanIsr)
<LI> fsl_lpuart.o(.data.s_lpuartIsr)
<LI> fsl_usdhc.o(.data.s_usdhcIsr)
<LI> startup_mimxrt1064.o(RESET)
<LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>ENC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>ENC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>ENC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>ENC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>ENET2_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[db]"></a>ENET_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>FLEXRAM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>FLEXSPI2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d7]"></a>FLEXSPI_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>GPIO1_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>GPIO1_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>GPIO1_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>GPIO1_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>GPIO1_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>GPIO1_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>GPIO1_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>GPIO1_INT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>GPIO1_INT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>GPIO1_INT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>GPIO3_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPIO4_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIO4_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPIO5_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>GPIO5_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>GPIO6_7_8_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>GPR_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>KPP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>LCDIF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>PMU_EVENT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>PWM1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>PWM1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>PWM1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>PWM1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>PWM1_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>PWM2_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>PWM2_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>PWM2_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>PWM2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>PWM2_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>PWM3_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>PWM3_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>PWM3_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>PWM3_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>PWM3_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>PWM4_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>PWM4_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>PWM4_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>PWM4_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>PWM4_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>PXP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>RTWDOG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>Reserved115_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>Reserved143_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>Reserved144_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>Reserved171_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>Reserved68_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>Reserved78_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>Reserved86_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>Reserved87_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SEMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SJC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SNVS_HP_WRAPPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SNVS_HP_WRAPPER_TZ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SNVS_LP_WRAPPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TEMP_LOW_HIGH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TEMP_PANIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>TMR4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TSC_DIG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USB_PHY1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USB_PHY2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>WDOG1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>WDOG2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>XBAR1_IRQ_0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>XBAR1_IRQ_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1d4]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1dd]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>SystemInit</STRONG> (Thumb, 590 bytes, Stack size 40 bytes, system_mimxrt1064.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[1d6]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_mimxrt1064.o(.text.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1de]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1df]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1e0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[e2]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetupPwm
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1e1]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[1e3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_GetDefaultConfig
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetDefaultConfig
</UL>

<P><STRONG><a name="[18d]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[1e5]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1e6]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1e7]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ea]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1cc]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1e9]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1cf]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1ea]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 1516 bytes, Stack size 48 bytes, clock_config.o(.text.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SwitchOsc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitRcOsc24M
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitArmPll
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitVideoPll
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitUsb2Pll
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitEnetPll
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitAudioPll
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetXtalFreq
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetRtcXtalFreq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPllBypass
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[103]"></a>BOARD_ConfigMPU</STRONG> (Thumb, 614 bytes, Stack size 32 bytes, board.o(.text.BOARD_ConfigMPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BOARD_ConfigMPU &rArr; ARM_MPU_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_MPU_Enable
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_MPU_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[106]"></a>BOARD_DebugConsoleSrcFreq</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, board.o(.text.BOARD_DebugConsoleSrcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = BOARD_DebugConsoleSrcFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMux
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[10b]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, board.o(.text.BOARD_InitDebugConsole))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>CAN1_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_flexcan.o(.text.CAN1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = CAN1_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>CAN2_DriverIRQHandler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fsl_flexcan.o(.text.CAN2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = CAN2_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>CAN3_DriverIRQHandler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fsl_flexcan.o(.text.CAN3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = CAN3_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[fc]"></a>CLOCK_DeinitAudioPll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitAudioPll))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[ff]"></a>CLOCK_DeinitEnetPll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitEnetPll))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[100]"></a>CLOCK_DeinitUsb2Pll</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitUsb2Pll))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[fe]"></a>CLOCK_DeinitVideoPll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitVideoPll))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[11f]"></a>CLOCK_GetAhbFreq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetAhbFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[121]"></a>CLOCK_GetFreq</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRtcFreq
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[123]"></a>CLOCK_GetIpgFreq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetIpgFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[124]"></a>CLOCK_GetPerClkFreq</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetPerClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[108]"></a>CLOCK_GetPllFreq</STRONG> (Thumb, 1092 bytes, Stack size 80 bytes, fsl_clock.o(.text.CLOCK_GetPllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_IsPllEnabled
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_IsPllBypassed
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllBypassRefClk
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[122]"></a>CLOCK_GetSemcFreq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetSemcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = CLOCK_GetSemcFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[128]"></a>CLOCK_GetSysPfdFreq</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetSysPfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[127]"></a>CLOCK_GetUsb1PfdFreq</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetUsb1PfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[fb]"></a>CLOCK_InitArmPll</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_InitArmPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_InitArmPll
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[f7]"></a>CLOCK_InitExternalClk</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_InitExternalClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = CLOCK_InitExternalClk &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[f8]"></a>CLOCK_InitRcOsc24M</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_InitRcOsc24M))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[f9]"></a>CLOCK_SwitchOsc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_SwitchOsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SwitchOsc
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[12c]"></a>CSI_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_csi.o(.text.CSI_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CSI_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_IRQHandler
</UL>

<P><STRONG><a name="[36]"></a>CSI_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, isr.o(.text.CSI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CSI_IRQHandler &rArr; CSI_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>DMA0_DMA16_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA0_DMA16_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA0_DMA16_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>DMA10_DMA26_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA10_DMA26_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA10_DMA26_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>DMA11_DMA27_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA11_DMA27_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA11_DMA27_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>DMA12_DMA28_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA12_DMA28_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA12_DMA28_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>DMA13_DMA29_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA13_DMA29_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA13_DMA29_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>DMA14_DMA30_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA14_DMA30_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA14_DMA30_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>DMA15_DMA31_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA15_DMA31_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA15_DMA31_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>DMA1_DMA17_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA1_DMA17_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA1_DMA17_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>DMA2_DMA18_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA2_DMA18_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA2_DMA18_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>DMA3_DMA19_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA3_DMA19_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA3_DMA19_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>DMA4_DMA20_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA4_DMA20_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA4_DMA20_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>DMA5_DMA21_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA5_DMA21_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA5_DMA21_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>DMA6_DMA22_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA6_DMA22_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA6_DMA22_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>DMA7_DMA23_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA7_DMA23_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA7_DMA23_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>DMA8_DMA24_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA8_DMA24_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA8_DMA24_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>DMA9_DMA25_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA9_DMA25_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA9_DMA25_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[10c]"></a>DbgConsole_Init</STRONG> (Thumb, 374 bytes, Stack size 104 bytes, fsl_debug_console.o(.text.DbgConsole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[137]"></a>DbgConsole_Printf</STRONG> (Thumb, 110 bytes, Stack size 176 bytes, fsl_debug_console.o(.text.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[136]"></a>DbgConsole_SendDataReliable</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, fsl_debug_console.o(.text.DbgConsole_SendDataReliable))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + In Cycle
<LI>Call Chain = DbgConsole_SendDataReliable &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_WriteBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintCallback
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[131]"></a>EDMA_GetChannelStatusFlags</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fsl_edma.o(.text.EDMA_GetChannelStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = EDMA_GetChannelStatusFlags &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_DMA25_DriverIRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_DMA24_DriverIRQHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_DMA23_DriverIRQHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_DMA22_DriverIRQHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_DMA21_DriverIRQHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_DMA20_DriverIRQHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_DMA19_DriverIRQHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_DMA18_DriverIRQHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DMA17_DriverIRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA15_DMA31_DriverIRQHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA14_DMA30_DriverIRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA13_DMA29_DriverIRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_DMA28_DriverIRQHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_DMA27_DriverIRQHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_DMA26_DriverIRQHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DMA16_DriverIRQHandler
</UL>

<P><STRONG><a name="[132]"></a>EDMA_HandleIRQ</STRONG> (Thumb, 410 bytes, Stack size 48 bytes, fsl_edma.o(.text.EDMA_HandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_DMA25_DriverIRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_DMA24_DriverIRQHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_DMA23_DriverIRQHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_DMA22_DriverIRQHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_DMA21_DriverIRQHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_DMA20_DriverIRQHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_DMA19_DriverIRQHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_DMA18_DriverIRQHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DMA17_DriverIRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA15_DMA31_DriverIRQHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA14_DMA30_DriverIRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA13_DMA29_DriverIRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_DMA28_DriverIRQHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_DMA27_DriverIRQHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_DMA26_DriverIRQHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DMA16_DriverIRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>ENET2_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_enet.o(.text.ENET2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = ENET2_DriverIRQHandler &rArr; ENET_CommonFrame0IRQHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_CommonFrame0IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_enet.o(.text.ENET_1588_Timer_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ENET_1588_Timer_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[13a]"></a>ENET_CommonFrame0IRQHandler</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, fsl_enet.o(.text.ENET_CommonFrame0IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = ENET_CommonFrame0IRQHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_DriverIRQHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET2_DriverIRQHandler
</UL>

<P><STRONG><a name="[da]"></a>ENET_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_enet.o(.text.ENET_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = ENET_DriverIRQHandler &rArr; ENET_CommonFrame0IRQHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_CommonFrame0IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[13b]"></a>ENET_GetInstance</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fsl_enet.o(.text.ENET_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_CommonFrame0IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>FLEXIO1_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_flexio.o(.text.FLEXIO1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLEXIO1_DriverIRQHandler &rArr; FLEXIO_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>FLEXIO2_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_flexio.o(.text.FLEXIO2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLEXIO2_DriverIRQHandler &rArr; FLEXIO_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[df]"></a>FLEXIO3_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_flexio.o(.text.FLEXIO3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLEXIO3_DriverIRQHandler &rArr; FLEXIO_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[13f]"></a>FLEXIO_CAMERA_ClearStatusFlags</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, fsl_flexio_camera.o(.text.FLEXIO_CAMERA_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FLEXIO_CAMERA_ClearStatusFlags &rArr; FLEXIO_ClearShifterStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_ClearShifterStatusFlags
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_ClearShifterErrorFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexio_flag_clear
</UL>

<P><STRONG><a name="[13e]"></a>FLEXIO_CommonIRQHandler</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, fsl_flexio.o(.text.FLEXIO_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLEXIO_CommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO3_DriverIRQHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO2_DriverIRQHandler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO1_DriverIRQHandler
</UL>

<P><STRONG><a name="[5d]"></a>GPIO2_Combined_0_15_IRQHandler</STRONG> (Thumb, 524 bytes, Stack size 8 bytes, isr.o(.text.GPIO2_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = GPIO2_Combined_0_15_IRQHandler &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_vsync
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinsInterruptFlags
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsInterruptFlags
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>GPIO2_Combined_16_31_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, isr.o(.text.GPIO2_Combined_16_31_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO2_Combined_16_31_IRQHandler &rArr; GPIO_ClearPinsInterruptFlags &rArr; GPIO_PortClearInterruptFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinsInterruptFlags
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsInterruptFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>GPIO3_Combined_0_15_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_sdmmc_host.o(.text.GPIO3_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = GPIO3_Combined_0_15_IRQHandler &rArr; GPIO_PinRead &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_Notify
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_NofiyCardInsertStatus
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortGetInterruptFlags
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClearInterruptFlags
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[154]"></a>GPIO_PinInit</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, fsl_gpio.o(.text.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinInterruptConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_interrupt_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[159]"></a>GPIO_PinSetInterruptConfig</STRONG> (Thumb, 228 bytes, Stack size 44 bytes, fsl_gpio.o(.text.GPIO_PinSetInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIO_PinSetInterruptConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinInterruptConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinInterruptConfig
</UL>

<P><STRONG><a name="[155]"></a>GPIO_PinWrite</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, fsl_gpio.o(.text.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_gpio_init
</UL>

<P><STRONG><a name="[15d]"></a>GPT_Deinit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fsl_gpt.o(.text.GPT_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = GPT_Deinit &rArr; CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_GetInstance
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_init
</UL>

<P><STRONG><a name="[15f]"></a>GPT_GetDefaultConfig</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, fsl_gpt.o(.text.GPT_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = GPT_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_init
</UL>

<P><STRONG><a name="[160]"></a>GPT_Init</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, fsl_gpt.o(.text.GPT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = GPT_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_SoftwareReset
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_SetClockSource
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_SetClockDivider
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_GetInstance
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_init
</UL>

<P><STRONG><a name="[166]"></a>HAL_UartInit</STRONG> (Thumb, 352 bytes, Stack size 64 bytes, lpuart_adapter.o(.text.HAL_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
</UL>

<P><STRONG><a name="[16a]"></a>HAL_UartSendBlocking</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, lpuart_adapter.o(.text.HAL_UartSendBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = HAL_UartSendBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[16c]"></a>Init_button</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, init.o(.text.Init_button))
<BR><BR>[Stack]<UL><LI>Max Depth = 3280<LI>Call Chain = Init_button &rArr; gpio_interrupt_init &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_interrupt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16e]"></a>Init_motor</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, init.o(.text.Init_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 3392<LI>Call Chain = Init_motor &rArr; pwm_init &rArr; pwm_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b4]"></a>Init_para</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, data.o(.text.Init_para))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>LPI2C1_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPI2C1_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>LPI2C2_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPI2C2_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>LPI2C3_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPI2C3_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>LPI2C4_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPI2C4_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>LPSPI1_DriverIRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fsl_lpspi.o(.text.LPSPI1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = LPSPI1_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>LPSPI2_DriverIRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fsl_lpspi.o(.text.LPSPI2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = LPSPI2_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>LPSPI3_DriverIRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fsl_lpspi.o(.text.LPSPI3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = LPSPI3_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>LPSPI4_DriverIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fsl_lpspi.o(.text.LPSPI4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = LPSPI4_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>LPUART1_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.LPUART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>LPUART2_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.LPUART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>LPUART3_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.LPUART3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART3_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>LPUART4_DriverIRQHandler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.LPUART4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART4_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>LPUART5_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.LPUART5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART5_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>LPUART6_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.LPUART6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART6_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>LPUART7_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.LPUART7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART7_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>LPUART8_DriverIRQHandler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.LPUART8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART8_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[174]"></a>LPUART_Deinit</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, fsl_lpuart.o(.text.LPUART_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = LPUART_Deinit &rArr; CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[167]"></a>LPUART_GetDefaultConfig</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, fsl_lpuart.o(.text.LPUART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = LPUART_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[175]"></a>LPUART_GetInstance</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.LPUART_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = LPUART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Deinit
</UL>

<P><STRONG><a name="[168]"></a>LPUART_Init</STRONG> (Thumb, 912 bytes, Stack size 80 bytes, fsl_lpuart.o(.text.LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_SoftwareReset
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[16b]"></a>LPUART_WriteBlocking</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, fsl_lpuart.o(.text.LPUART_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = LPUART_WriteBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[177]"></a>PIT_Deinit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_pit.o(.text.PIT_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = PIT_Deinit &rArr; CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetInstance
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
</UL>

<P><STRONG><a name="[85]"></a>PIT_IRQHandler</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, isr.o(.text.PIT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = PIT_IRQHandler &rArr; gpio_get &rArr; GPIO_ReadPadStatus &rArr; GPIO_PinReadPadStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetStatusFlags
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[17d]"></a>PIT_Init</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, fsl_pit.o(.text.PIT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = PIT_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetInstance
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
</UL>

<P><STRONG><a name="[17e]"></a>PWM_Deinit</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fsl_pwm.o(.text.PWM_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = PWM_Deinit &rArr; CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetInstance
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[180]"></a>PWM_GetDefaultConfig</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fsl_pwm.o(.text.PWM_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = PWM_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[181]"></a>PWM_Init</STRONG> (Thumb, 654 bytes, Stack size 48 bytes, fsl_pwm.o(.text.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = PWM_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetInstance
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[182]"></a>PWM_SetupPwm</STRONG> (Thumb, 1452 bytes, Stack size 96 bytes, fsl_pwm.o(.text.PWM_SetupPwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = PWM_SetupPwm &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetComplementU16
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>SAI1_DriverIRQHandler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, fsl_sai.o(.text.SAI1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SAI1_DriverIRQHandler &rArr; SAI_TxGetEnabledInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TxGetEnabledInterruptStatus
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_RxGetEnabledInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>SAI2_DriverIRQHandler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, fsl_sai.o(.text.SAI2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SAI2_DriverIRQHandler &rArr; SAI_TxGetEnabledInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TxGetEnabledInterruptStatus
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_RxGetEnabledInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>SAI3_RX_DriverIRQHandler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fsl_sai.o(.text.SAI3_RX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = SAI3_RX_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>SAI3_TX_DriverIRQHandler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fsl_sai.o(.text.SAI3_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = SAI3_TX_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[14c]"></a>SDMMCEVENT_Notify</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, fsl_sdmmc_event.o(.text.SDMMCEVENT_Notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMCEVENT_Notify &rArr; SDMMCEVENT_GetInstance
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>SPDIF_DriverIRQHandler</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, fsl_spdif.o(.text.SPDIF_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPDIF_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[133]"></a>SerialManager_Init</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, serial_manager.o(.text.SerialManager_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[135]"></a>SerialManager_OpenReadHandle</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, serial_manager.o(.text.SerialManager_OpenReadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = SerialManager_OpenReadHandle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[134]"></a>SerialManager_OpenWriteHandle</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, serial_manager.o(.text.SerialManager_OpenWriteHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = SerialManager_OpenWriteHandle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[139]"></a>SerialManager_WriteBlocking</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, serial_manager.o(.text.SerialManager_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SerialManager_WriteBlocking &rArr; SerialManager_Write &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
</UL>

<P><STRONG><a name="[187]"></a>Serial_UartInit</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, serial_port_uart.o(.text.Serial_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
</UL>

<P><STRONG><a name="[18b]"></a>Serial_UartWrite</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, serial_port_uart.o(.text.Serial_UartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = Serial_UartWrite &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_StartWriting
</UL>

<P><STRONG><a name="[138]"></a>StrFormatPrintf</STRONG> (Thumb, 2810 bytes, Stack size 352 bytes, fsl_str.o(.text.StrFormatPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_sdmmc_event.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[194]"></a>USB_DeviceEhciIsrFunction</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, usb_device_ehci.o(.text.USB_DeviceEhciIsrFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = USB_DeviceEhciIsrFunction &rArr; USB_DeviceEhciInterruptTokenDone &rArr; USB_DeviceEhciCancelControlPipe &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptTokenDone
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptSof
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptReset
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptPortChange
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG2_IRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG1_IRQHandler
</UL>

<P><STRONG><a name="[18f]"></a>USB_DeviceNotificationTrigger</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, usb_device_dci.o(.text.USB_DeviceNotificationTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptTokenDone
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptReset
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptPortChange
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciCancelControlPipe
</UL>

<P><STRONG><a name="[7c]"></a>USB_OTG1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, zf_usb_cdc.o(.text.USB_OTG1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = USB_OTG1_IRQHandler &rArr; USB_DeviceEhciIsrFunction &rArr; USB_DeviceEhciInterruptTokenDone &rArr; USB_DeviceEhciCancelControlPipe &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>USB_OTG2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, zf_usb_cdc.o(.text.USB_OTG2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = USB_OTG2_IRQHandler &rArr; USB_DeviceEhciIsrFunction &rArr; USB_DeviceEhciInterruptTokenDone &rArr; USB_DeviceEhciCancelControlPipe &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>USDHC1_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_usdhc.o(.text.USDHC1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USDHC1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>USDHC2_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_usdhc.o(.text.USDHC2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USDHC2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[10d]"></a>__aeabi_assert</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, fsl_assert.o(.text.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN3_DriverIRQHandler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_DriverIRQHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_DriverIRQHandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_GetDefaultConfig
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_SetClockDivider
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_GetInstance
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI4_DriverIRQHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI3_DriverIRQHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI2_DriverIRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI1_DriverIRQHandler
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetupPwm
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetDefaultConfig
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetInstance
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetInstance
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI3_TX_DriverIRQHandler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI3_RX_DriverIRQHandler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinReadPadStatus
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_iomuxc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetDefaultConfig
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iomuxc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_SetOutputCompareValue
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_SetClockDivider
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
</UL>

<P><STRONG><a name="[199]"></a>board_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, board.o(.text.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3344<LI>Call Chain = board_init &rArr; uart_init &rArr; uart_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19c]"></a>dma_restart</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, zf_camera.o(.text.dma_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dma_restart &rArr; flexio_flag_clear &rArr; FLEXIO_CAMERA_ClearStatusFlags &rArr; FLEXIO_ClearShifterStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexio_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_vsync
</UL>

<P><STRONG><a name="[19e]"></a>fast_gpio_init</STRONG> (Thumb, 376 bytes, Stack size 56 bytes, zf_gpio.o(.text.fast_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3272<LI>Call Chain = fast_gpio_init &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinInterruptConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
</UL>

<P><STRONG><a name="[1a0]"></a>fast_gpio_set</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, zf_gpio.o(.text.fast_gpio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fast_gpio_set &rArr; GPIO_SetPinsOutput &rArr; GPIO_PortSet
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinsOutput
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_reg
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_data16
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_data
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
</UL>

<P><STRONG><a name="[19d]"></a>flexio_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, zf_camera.o(.text.flexio_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flexio_flag_clear &rArr; FLEXIO_CAMERA_ClearStatusFlags &rArr; FLEXIO_ClearShifterStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CAMERA_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_restart
</UL>

<P><STRONG><a name="[146]"></a>gpio_get</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, zf_gpio.o(.text.gpio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = gpio_get &rArr; GPIO_ReadPadStatus &rArr; GPIO_PinReadPadStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[170]"></a>gpio_init</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, zf_gpio.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3264<LI>Call Chain = gpio_init &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_motor
</UL>

<P><STRONG><a name="[16d]"></a>gpio_interrupt_init</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, zf_gpio.o(.text.gpio_interrupt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3264<LI>Call Chain = gpio_interrupt_init &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortEnableInterrupts
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_button
</UL>

<P><STRONG><a name="[17b]"></a>gpio_set</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, zf_gpio.o(.text.gpio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gpio_set &rArr; GPIO_SetPinsOutput &rArr; GPIO_PortSet
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinsOutput
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>

<P><STRONG><a name="[1a2]"></a>gpt_init</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, zf_systick.o(.text.gpt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = gpt_init &rArr; GPT_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_GetDefaultConfig
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Deinit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_SetClockDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay
</UL>

<P><STRONG><a name="[19f]"></a>iomuxc_pinconf</STRONG> (Thumb, 40444 bytes, Stack size 2248 bytes, zf_iomuxc.o(.text.iomuxc_pinconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 3216<LI>Call Chain = iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_interrupt_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_gpio_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_iomuxc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iomuxc
</UL>

<P><STRONG><a name="[1a5]"></a>ips200_address_set</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, seekfree_ips200_parallel8.o(.text.ips200_address_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ips200_address_set &rArr; ips200_wr_reg &rArr; fast_gpio_set &rArr; GPIO_SetPinsOutput &rArr; GPIO_PortSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_reg
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_data16
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_showchar
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_display_chinese
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_clear
</UL>

<P><STRONG><a name="[1a8]"></a>ips200_clear</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, seekfree_ips200_parallel8.o(.text.ips200_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ips200_clear &rArr; ips200_address_set &rArr; ips200_wr_reg &rArr; fast_gpio_set &rArr; GPIO_SetPinsOutput &rArr; GPIO_PortSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_data16
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display
</UL>

<P><STRONG><a name="[1a9]"></a>ips200_display_chinese</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, seekfree_ips200_parallel8.o(.text.ips200_display_chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ips200_display_chinese &rArr; ips200_address_set &rArr; ips200_wr_reg &rArr; fast_gpio_set &rArr; GPIO_SetPinsOutput &rArr; GPIO_PortSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_data16
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display
</UL>

<P><STRONG><a name="[1aa]"></a>ips200_init</STRONG> (Thumb, 638 bytes, Stack size 96 bytes, seekfree_ips200_parallel8.o(.text.ips200_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3368<LI>Call Chain = ips200_init &rArr; fast_gpio_init &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_gpio_set
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_gpio_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_reg
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_data
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ad]"></a>ips200_showchar</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, seekfree_ips200_parallel8.o(.text.ips200_showchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ips200_showchar &rArr; ips200_address_set &rArr; ips200_wr_reg &rArr; fast_gpio_set &rArr; GPIO_SetPinsOutput &rArr; GPIO_PortSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_data16
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_showstr
</UL>

<P><STRONG><a name="[1ae]"></a>ips200_showint32</STRONG> (Thumb, 216 bytes, Stack size 80 bytes, seekfree_ips200_parallel8.o(.text.ips200_showint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ips200_showint32 &rArr; ips200_showstr &rArr; ips200_showchar &rArr; ips200_address_set &rArr; ips200_wr_reg &rArr; fast_gpio_set &rArr; GPIO_SetPinsOutput &rArr; GPIO_PortSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_showstr
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display
</UL>

<P><STRONG><a name="[1b0]"></a>ips200_showstr</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, seekfree_ips200_parallel8.o(.text.ips200_showstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ips200_showstr &rArr; ips200_showchar &rArr; ips200_address_set &rArr; ips200_wr_reg &rArr; fast_gpio_set &rArr; GPIO_SetPinsOutput &rArr; GPIO_PortSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_showchar
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_showint32
</UL>

<P><STRONG><a name="[1b1]"></a>ips200_w_data</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, seekfree_ips200_parallel8.o(.text.ips200_w_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ips200_w_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_reg
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_data16
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_data
</UL>

<P><STRONG><a name="[1ac]"></a>ips200_wr_data</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, seekfree_ips200_parallel8.o(.text.ips200_wr_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ips200_wr_data &rArr; fast_gpio_set &rArr; GPIO_SetPinsOutput &rArr; GPIO_PortSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_gpio_set
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_w_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
</UL>

<P><STRONG><a name="[1a7]"></a>ips200_wr_data16</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, seekfree_ips200_parallel8.o(.text.ips200_wr_data16))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ips200_wr_data16 &rArr; fast_gpio_set &rArr; GPIO_SetPinsOutput &rArr; GPIO_PortSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_gpio_set
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_w_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_showchar
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_display_chinese
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_clear
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_address_set
</UL>

<P><STRONG><a name="[1a6]"></a>ips200_wr_reg</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, seekfree_ips200_parallel8.o(.text.ips200_wr_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ips200_wr_reg &rArr; fast_gpio_set &rArr; GPIO_SetPinsOutput &rArr; GPIO_PortSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_gpio_set
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_w_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_address_set
</UL>

<P><STRONG><a name="[a9]"></a>main</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 3416<LI>Call Chain = main &rArr; Init_motor &rArr; pwm_init &rArr; pwm_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_para
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_motor
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_button
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1b5]"></a>menu_display</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, menu.o(.text.menu_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = menu_display &rArr; ips200_showint32 &rArr; ips200_showstr &rArr; ips200_showchar &rArr; ips200_address_set &rArr; ips200_wr_reg &rArr; fast_gpio_set &rArr; GPIO_SetPinsOutput &rArr; GPIO_PortSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_showint32
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_display_chinese
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_clear
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[144]"></a>menu_select</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, menu.o(.text.menu_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = menu_select &rArr; menu_display &rArr; ips200_showint32 &rArr; ips200_showstr &rArr; ips200_showchar &rArr; ips200_address_set &rArr; ips200_wr_reg &rArr; fast_gpio_set &rArr; GPIO_SetPinsOutput &rArr; GPIO_PortSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_limit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>mt9v03x_vsync</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, seekfree_mt9v03x.o(.text.mt9v03x_vsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mt9v03x_vsync &rArr; dma_restart &rArr; flexio_flag_clear &rArr; FLEXIO_CAMERA_ClearStatusFlags &rArr; FLEXIO_ClearShifterStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_restart
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[1b3]"></a>pit_init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, zf_pit.o(.text.pit_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = pit_init &rArr; PIT_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Deinit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16f]"></a>pwm_init</STRONG> (Thumb, 760 bytes, Stack size 128 bytes, zf_pwm.o(.text.pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3368<LI>Call Chain = pwm_init &rArr; pwm_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetupPwm
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetDefaultConfig
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Deinit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_iomuxc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_StartTimer
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetPwmLdok
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_motor
</UL>

<P><STRONG><a name="[1b9]"></a>pwm_iomuxc</STRONG> (Thumb, 1256 bytes, Stack size 24 bytes, zf_pwm.o(.text.pwm_iomuxc))
<BR><BR>[Stack]<UL><LI>Max Depth = 3240<LI>Call Chain = pwm_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[142]"></a>systick_delay</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, zf_systick.o(.text.systick_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = systick_delay &rArr; gpt_init &rArr; GPT_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_StopTimer
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_StartTimer
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_SetOutputCompareValue
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_GetStatusFlags
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[1ab]"></a>systick_delay_ms</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, zf_systick.o(.text.systick_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = systick_delay_ms &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
</UL>

<P><STRONG><a name="[19a]"></a>uart_init</STRONG> (Thumb, 152 bytes, Stack size 88 bytes, zf_uart.o(.text.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3336<LI>Call Chain = uart_init &rArr; uart_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Deinit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iomuxc
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[1c0]"></a>uart_iomuxc</STRONG> (Thumb, 1016 bytes, Stack size 32 bytes, zf_uart.o(.text.uart_iomuxc))
<BR><BR>[Stack]<UL><LI>Max Depth = 3248<LI>Call Chain = uart_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1c1]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ed]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1ee]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1ef]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1af]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_showint32
</UL>

<P><STRONG><a name="[1cd]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[12e]"></a>__hardfp_modf</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, modf.o(i.__hardfp_modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_modf
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[12f]"></a>__hardfp_pow</STRONG> (Thumb, 2108 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[1cb]"></a>__kernel_poly</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1c5]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1c3]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1c9]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1c6]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1ca]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1c4]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1c8]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1c7]"></a>sqrt</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[104]"></a>ARM_MPU_Disable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, board.o(.text.ARM_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[105]"></a>ARM_MPU_Enable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, board.o(.text.ARM_MPU_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ARM_MPU_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[109]"></a>CLOCK_GetDiv</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, board.o(.text.CLOCK_GetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[107]"></a>CLOCK_GetMux</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, board.o(.text.CLOCK_GetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetMux
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[10a]"></a>CLOCK_GetOscFreq</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, board.o(.text.CLOCK_GetOscFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[19b]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, board.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[10e]"></a>CLOCK_ControlGate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, clock_config.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>

<P><STRONG><a name="[102]"></a>CLOCK_DisableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, clock_config.o(.text.CLOCK_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[101]"></a>CLOCK_SetDiv</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, clock_config.o(.text.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_SetDiv &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[fa]"></a>CLOCK_SetMux</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, clock_config.o(.text.CLOCK_SetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[fd]"></a>CLOCK_SetPllBypass</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, clock_config.o(.text.CLOCK_SetPllBypass))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_SetPllBypass
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[f5]"></a>CLOCK_SetRtcXtalFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, clock_config.o(.text.CLOCK_SetRtcXtalFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetRtcXtalFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[f6]"></a>CLOCK_SetXtalFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, clock_config.o(.text.CLOCK_SetXtalFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetXtalFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[188]"></a>DisableGlobalIRQ</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, serial_manager.o(.text.DisableGlobalIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
</UL>

<P><STRONG><a name="[189]"></a>EnableGlobalIRQ</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, serial_manager.o(.text.EnableGlobalIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EnableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
</UL>

<P><STRONG><a name="[18a]"></a>SerialManager_StartWriting</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, serial_manager.o(.text.SerialManager_StartWriting))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SerialManager_StartWriting &rArr; Serial_UartWrite &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
</UL>

<P><STRONG><a name="[18c]"></a>SerialManager_Write</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, serial_manager.o(.text.SerialManager_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + In Cycle
<LI>Call Chain = SerialManager_Write &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_StartWriting
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_WriteBlocking
</UL>

<P><STRONG><a name="[169]"></a>HAL_UartGetStatus</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, lpuart_adapter.o(.text.HAL_UartGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UartGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[125]"></a>CLOCK_GetOscFreq</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, fsl_clock.o(.text.CLOCK_GetOscFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllBypassRefClk
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[120]"></a>CLOCK_GetPeriphClkFreq</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetPeriphClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
</UL>

<P><STRONG><a name="[129]"></a>CLOCK_GetPllBypassRefClk</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, fsl_clock.o(.text.CLOCK_GetPllBypassRefClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CLOCK_GetPllBypassRefClk &rArr; CLOCK_GetOscFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>

<P><STRONG><a name="[126]"></a>CLOCK_GetRtcFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetRtcFreq))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[12b]"></a>CLOCK_IsPllBypassed</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_IsPllBypassed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_IsPllBypassed
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>

<P><STRONG><a name="[12a]"></a>CLOCK_IsPllEnabled</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_IsPllEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_IsPllEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>

<P><STRONG><a name="[141]"></a>FLEXIO_ClearShifterErrorFlags</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fsl_flexio_camera.o(.text.FLEXIO_ClearShifterErrorFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXIO_ClearShifterErrorFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CAMERA_ClearStatusFlags
</UL>

<P><STRONG><a name="[140]"></a>FLEXIO_ClearShifterStatusFlags</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fsl_flexio_camera.o(.text.FLEXIO_ClearShifterStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXIO_ClearShifterStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CAMERA_ClearStatusFlags
</UL>

<P><STRONG><a name="[10f]"></a>CLOCK_ControlGate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fsl_gpio.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[119]"></a>CLOCK_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_gpio.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[152]"></a>GPIO_GetInstance</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsl_gpio.o(.text.GPIO_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = GPIO_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[156]"></a>GPIO_SetPinInterruptConfig</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, fsl_gpio.o(.text.GPIO_SetPinInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GPIO_SetPinInterruptConfig &rArr; GPIO_PinSetInterruptConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSetInterruptConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[110]"></a>CLOCK_ControlGate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fsl_gpt.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>

<P><STRONG><a name="[115]"></a>CLOCK_DisableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_gpt.o(.text.CLOCK_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Deinit
</UL>

<P><STRONG><a name="[11a]"></a>CLOCK_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_gpt.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Init
</UL>

<P><STRONG><a name="[15e]"></a>GPT_GetInstance</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsl_gpt.o(.text.GPT_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = GPT_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Deinit
</UL>

<P><STRONG><a name="[163]"></a>GPT_SetClockDivider</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fsl_gpt.o(.text.GPT_SetClockDivider))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = GPT_SetClockDivider &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Init
</UL>

<P><STRONG><a name="[162]"></a>GPT_SetClockSource</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fsl_gpt.o(.text.GPT_SetClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPT_SetClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Init
</UL>

<P><STRONG><a name="[161]"></a>GPT_SoftwareReset</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_gpt.o(.text.GPT_SoftwareReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPT_SoftwareReset
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Init
</UL>

<P><STRONG><a name="[171]"></a>LPI2C_CommonIRQHandler</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, fsl_lpi2c.o(.text.LPI2C_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LPI2C_CommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C4_DriverIRQHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C3_DriverIRQHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C2_DriverIRQHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C1_DriverIRQHandler
</UL>

<P><STRONG><a name="[172]"></a>LPSPI_CommonIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, fsl_lpspi.o(.text.LPSPI_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPSPI_CommonIRQHandler &rArr; LPSPI_IsMaster
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_IsMaster
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI4_DriverIRQHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI3_DriverIRQHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI2_DriverIRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI1_DriverIRQHandler
</UL>

<P><STRONG><a name="[173]"></a>LPSPI_IsMaster</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_lpspi.o(.text.LPSPI_IsMaster))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPSPI_IsMaster
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>

<P><STRONG><a name="[111]"></a>CLOCK_ControlGate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fsl_lpuart.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>

<P><STRONG><a name="[116]"></a>CLOCK_DisableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.CLOCK_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Deinit
</UL>

<P><STRONG><a name="[11b]"></a>CLOCK_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[176]"></a>LPUART_SoftwareReset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART_SoftwareReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART_SoftwareReset
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[112]"></a>CLOCK_ControlGate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fsl_pit.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>

<P><STRONG><a name="[117]"></a>CLOCK_DisableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_pit.o(.text.CLOCK_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Deinit
</UL>

<P><STRONG><a name="[11c]"></a>CLOCK_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_pit.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>

<P><STRONG><a name="[178]"></a>PIT_GetInstance</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsl_pit.o(.text.PIT_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = PIT_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Deinit
</UL>

<P><STRONG><a name="[113]"></a>CLOCK_ControlGate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fsl_pwm.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>

<P><STRONG><a name="[118]"></a>CLOCK_DisableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_pwm.o(.text.CLOCK_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Deinit
</UL>

<P><STRONG><a name="[11d]"></a>CLOCK_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_pwm.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[183]"></a>PWM_GetComplementU16</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_pwm.o(.text.PWM_GetComplementU16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_GetComplementU16
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetupPwm
</UL>

<P><STRONG><a name="[17f]"></a>PWM_GetInstance</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsl_pwm.o(.text.PWM_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = PWM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Deinit
</UL>

<P><STRONG><a name="[184]"></a>SAI_RxGetEnabledInterruptStatus</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, fsl_sai.o(.text.SAI_RxGetEnabledInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SAI_RxGetEnabledInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_DriverIRQHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_DriverIRQHandler
</UL>

<P><STRONG><a name="[185]"></a>SAI_TxGetEnabledInterruptStatus</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, fsl_sai.o(.text.SAI_TxGetEnabledInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SAI_TxGetEnabledInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_DriverIRQHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_DriverIRQHandler
</UL>

<P><STRONG><a name="[186]"></a>SDMMCEVENT_GetInstance</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_sdmmc_event.o(.text.SDMMCEVENT_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDMMCEVENT_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_Notify
</UL>

<P><STRONG><a name="[149]"></a>GPIO_PinRead</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fsl_sdmmc_host.o(.text.GPIO_PinRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = GPIO_PinRead &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>GPIO_PortClearInterruptFlags</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fsl_sdmmc_host.o(.text.GPIO_PortClearInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PortClearInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>GPIO_PortGetInterruptFlags</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_sdmmc_host.o(.text.GPIO_PortGetInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PortGetInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>SDMMCHOST_NofiyCardInsertStatus</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, fsl_sdmmc_host.o(.text.SDMMCHOST_NofiyCardInsertStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMCHOST_NofiyCardInsertStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>EnableIRQ</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, zf_gpio.o(.text.EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_interrupt_init
</UL>

<P><STRONG><a name="[150]"></a>GPIO_ClearPinsOutput</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, zf_gpio.o(.text.GPIO_ClearPinsOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_ClearPinsOutput &rArr; GPIO_PortClear
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_gpio_set
</UL>

<P><STRONG><a name="[157]"></a>GPIO_PinReadPadStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, zf_gpio.o(.text.GPIO_PinReadPadStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = GPIO_PinReadPadStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPadStatus
</UL>

<P><STRONG><a name="[151]"></a>GPIO_PortClear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, zf_gpio.o(.text.GPIO_PortClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsOutput
</UL>

<P><STRONG><a name="[1a1]"></a>GPIO_PortEnableInterrupts</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, zf_gpio.o(.text.GPIO_PortEnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PortEnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_interrupt_init
</UL>

<P><STRONG><a name="[15c]"></a>GPIO_PortSet</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, zf_gpio.o(.text.GPIO_PortSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PortSet
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinsOutput
</UL>

<P><STRONG><a name="[158]"></a>GPIO_ReadPadStatus</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, zf_gpio.o(.text.GPIO_ReadPadStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = GPIO_ReadPadStatus &rArr; GPIO_PinReadPadStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinReadPadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
</UL>

<P><STRONG><a name="[15a]"></a>GPIO_SetPinInterruptConfig</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, zf_gpio.o(.text.GPIO_SetPinInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GPIO_SetPinInterruptConfig &rArr; GPIO_PinSetInterruptConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSetInterruptConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_gpio_init
</UL>

<P><STRONG><a name="[15b]"></a>GPIO_SetPinsOutput</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, zf_gpio.o(.text.GPIO_SetPinsOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_SetPinsOutput &rArr; GPIO_PortSet
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_gpio_set
</UL>

<P><STRONG><a name="[13d]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, zf_gpio.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[114]"></a>CLOCK_ControlGate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, zf_iomuxc.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[11e]"></a>CLOCK_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, zf_iomuxc.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>

<P><STRONG><a name="[1a4]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 64 bytes, Stack size 60 bytes, zf_iomuxc.o(.text.IOMUXC_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>

<P><STRONG><a name="[1a3]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 84 bytes, Stack size 60 bytes, zf_iomuxc.o(.text.IOMUXC_SetPinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>

<P><STRONG><a name="[179]"></a>PIT_GetDefaultConfig</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, zf_pit.o(.text.PIT_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = PIT_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
</UL>

<P><STRONG><a name="[1ba]"></a>PWM_SetPwmLdok</STRONG> (Thumb, 92 bytes, Stack size 28 bytes, zf_pwm.o(.text.PWM_SetPwmLdok))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PWM_SetPwmLdok
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[1bb]"></a>PWM_StartTimer</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, zf_pwm.o(.text.PWM_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[1be]"></a>GPT_ClearStatusFlags</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, zf_systick.o(.text.GPT_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPT_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay
</UL>

<P><STRONG><a name="[1bd]"></a>GPT_GetStatusFlags</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, zf_systick.o(.text.GPT_GetStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPT_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay
</UL>

<P><STRONG><a name="[164]"></a>GPT_SetClockDivider</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, zf_systick.o(.text.GPT_SetClockDivider))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = GPT_SetClockDivider &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_init
</UL>

<P><STRONG><a name="[165]"></a>GPT_SetOutputCompareValue</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, zf_systick.o(.text.GPT_SetOutputCompareValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = GPT_SetOutputCompareValue &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay
</UL>

<P><STRONG><a name="[1bc]"></a>GPT_StartTimer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, zf_systick.o(.text.GPT_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPT_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay
</UL>

<P><STRONG><a name="[1bf]"></a>GPT_StopTimer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, zf_systick.o(.text.GPT_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPT_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay
</UL>

<P><STRONG><a name="[14d]"></a>GPIO_ClearPinsInterruptFlags</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, seekfree_mt9v03x.o(.text.GPIO_ClearPinsInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_ClearPinsInterruptFlags &rArr; GPIO_PortClearInterruptFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClearInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_vsync
</UL>

<P><STRONG><a name="[14e]"></a>GPIO_PortClearInterruptFlags</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, seekfree_mt9v03x.o(.text.GPIO_PortClearInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PortClearInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsInterruptFlags
</UL>

<P><STRONG><a name="[18e]"></a>USB_DeviceEhciCancelControlPipe</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, usb_device_ehci.o(.text.USB_DeviceEhciCancelControlPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = USB_DeviceEhciCancelControlPipe &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptTokenDone
</UL>

<P><STRONG><a name="[193]"></a>USB_DeviceEhciFillSetupBuffer</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, usb_device_ehci.o(.text.USB_DeviceEhciFillSetupBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_DeviceEhciFillSetupBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptTokenDone
</UL>

<P><STRONG><a name="[190]"></a>USB_DeviceEhciInterruptPortChange</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, usb_device_ehci.o(.text.USB_DeviceEhciInterruptPortChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USB_DeviceEhciInterruptPortChange &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
</UL>

<P><STRONG><a name="[191]"></a>USB_DeviceEhciInterruptReset</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, usb_device_ehci.o(.text.USB_DeviceEhciInterruptReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USB_DeviceEhciInterruptReset &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
</UL>

<P><STRONG><a name="[195]"></a>USB_DeviceEhciInterruptSof</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usb_device_ehci.o(.text.USB_DeviceEhciInterruptSof))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DeviceEhciInterruptSof
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
</UL>

<P><STRONG><a name="[192]"></a>USB_DeviceEhciInterruptTokenDone</STRONG> (Thumb, 1088 bytes, Stack size 64 bytes, usb_device_ehci.o(.text.USB_DeviceEhciInterruptTokenDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = USB_DeviceEhciInterruptTokenDone &rArr; USB_DeviceEhciCancelControlPipe &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciFillSetupBuffer
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciCancelControlPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
</UL>

<P><STRONG><a name="[198]"></a>USB_DeviceControl</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, usb_device_dci.o(.text.USB_DeviceControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceResetNotification
</UL>

<P><STRONG><a name="[196]"></a>USB_DeviceNotification</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, usb_device_dci.o(.text.USB_DeviceNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceResetNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
</UL>

<P><STRONG><a name="[197]"></a>USB_DeviceResetNotification</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, usb_device_dci.o(.text.USB_DeviceResetNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotification
</UL>

<P><STRONG><a name="[145]"></a>GPIO_ClearPinsInterruptFlags</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, isr.o(.text.GPIO_ClearPinsInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_ClearPinsInterruptFlags &rArr; GPIO_PortClearInterruptFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClearInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_16_31_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[143]"></a>GPIO_GetPinsInterruptFlags</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, isr.o(.text.GPIO_GetPinsInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_GetPinsInterruptFlags &rArr; GPIO_PortGetInterruptFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortGetInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_16_31_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>GPIO_PortClearInterruptFlags</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, isr.o(.text.GPIO_PortClearInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PortClearInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsInterruptFlags
</UL>

<P><STRONG><a name="[153]"></a>GPIO_PortGetInterruptFlags</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr.o(.text.GPIO_PortGetInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PortGetInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinsInterruptFlags
</UL>

<P><STRONG><a name="[17c]"></a>PIT_ClearStatusFlags</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, isr.o(.text.PIT_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIT_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>

<P><STRONG><a name="[17a]"></a>PIT_GetStatusFlags</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, isr.o(.text.PIT_GetStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIT_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>

<P><STRONG><a name="[1b2]"></a>DisableGlobalIRQ</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, main.o(.text.DisableGlobalIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b6]"></a>EnableGlobalIRQ</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, main.o(.text.EnableGlobalIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EnableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>DbgConsole_PrintCallback</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, fsl_debug_console.o(.text.DbgConsole_PrintCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = DbgConsole_PrintCallback &rArr; DbgConsole_SendDataReliable &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(.text.DbgConsole_Printf)
</UL>
<P><STRONG><a name="[12d]"></a>ConvertFloatRadixNumToString</STRONG> (Thumb, 662 bytes, Stack size 152 bytes, fsl_str.o(.text.ConvertFloatRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_modf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[130]"></a>ConvertRadixNumToString</STRONG> (Thumb, 480 bytes, Stack size 120 bytes, fsl_str.o(.text.ConvertRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ConvertRadixNumToString &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[1b7]"></a>info</STRONG> (Thumb, 2428 bytes, Stack size 32 bytes, menu.o(.text.info))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = info
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display
</UL>

<P><STRONG><a name="[1b8]"></a>menu_limit</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, menu.o(.text.menu_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = menu_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
</UL>

<P><STRONG><a name="[1ce]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c2]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[1d1]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d0]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e1]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
